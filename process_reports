# -*- coding: utf-8 -*-
"""
数据分析日报自动生成脚本 (功能完整 | 全字段输出 | LTV归因修正 | 最终版)
"""
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import os
import sys

# ==================== 配置区域 ====================
# 文件路径配置
FILE_BOOK1 = 'Book1.xlsx'
FILE_BOOK2 = 'Book2.xlsx'
FILE_BOOK3 = 'Book3.xlsx'
FILE_BOOK4 = 'Book4.xlsx'
FILE_BOOK5 = 'Book5.xlsx'

# 核心配置
EXCHANGE_RATE = 281
REPORT_DATE = '2025-08-29' # 报表日期（设为None则自动使用最新日期）

# 输出精度配置
PRODUCT_REPORT_DECIMALS = 4
OTHER_REPORTS_DECIMALS = 2
# ==================================================


def load_and_prepare_data():
    """加载所有Excel文件并进行预处理，强制转换数据类型以确保健壮性。"""
    print("\n开始加载和预处理数据...")
    try:
        df_channel = pd.read_excel(FILE_BOOK1)
        df_product = pd.read_excel(FILE_BOOK2)
        df_dept_map = pd.read_excel(FILE_BOOK3)
        df_recharge_rate = pd.read_excel(FILE_BOOK4)
        df_cost = pd.read_excel(FILE_BOOK5)
        print("✓ 所有Excel文件加载成功。")

        for df in [df_channel, df_product, df_dept_map, df_recharge_rate, df_cost]:
            df.columns = df.columns.str.strip()
        print("  ✓ 所有数据表的列名已自动清理前后空格。")

        numeric_cols_list = ['新增用户数','充值人数','充值金额','提现金额','充减提','首存人数','首存充值金额','新增付费人数','新增充值金额','老用户充值人数','老用户充值金额','老用户充减提','老玩家日活']
        for col in numeric_cols_list:
            if col in df_channel.columns: df_channel[col] = pd.to_numeric(df_channel[col], errors='coerce').fillna(0)
            if col in df_product.columns: df_product[col] = pd.to_numeric(df_product[col], errors='coerce').fillna(0)
        print("  ✓ 已将核心数据列强制转换为数字格式，并用0填充错误。")
        
        df_product_pkr_for_ltv = df_product.copy()
        df_channel_pkr_for_ltv = df_channel.copy()
        
        all_dfs = { "channel": df_channel, "product": df_product, "product_pkr": df_product_pkr_for_ltv, "channel_pkr": df_channel_pkr_for_ltv, "recharge_rate": df_recharge_rate, "cost": df_cost }
        for _, df in all_dfs.items():
            if '日期' in df.columns:
                df['日期'] = pd.to_datetime(df['日期'], errors='coerce')
                df.dropna(subset=['日期'], inplace=True)
        print("  ✓ 日期列已处理，无效日期行已自动移除。")

        for df in [df_product_pkr_for_ltv, df_channel_pkr_for_ltv]:
            if '充减提' not in df.columns: df['充减提'] = df['充值金额'] - df['提现金额']
        print("  ✓ 已为LTV计算准备好未经换算的产品和渠道数据副本 (PKR)。")

        df_cost.rename(columns={'花费（$）': '消耗'}, inplace=True)
        
        amount_cols = ['充值金额', '提现金额', '首存充值金额', '新增充值金额', '充减提', '老用户充减提']
        for df in [df_channel, df_product]:
            if '充减提' not in df.columns: df['充减提'] = df['充值金额'] - df['提现金额']
            for col in amount_cols:
                if col in df.columns: df[col] /= EXCHANGE_RATE
        print(f"  ✓ 用于报表的数据已按 1:{EXCHANGE_RATE} 的汇率完成换算 (USD)。")
        
        print("数据预处理完成！\n")
        
        data_frames = {'channel': df_channel, 'product_usd': df_product, 'dept_map': df_dept_map, 'recharge_rate': df_recharge_rate, 'cost': df_cost}
        return data_frames, df_product_pkr_for_ltv, df_channel_pkr_for_ltv
    except Exception as e:
        print(f"✗ 错误: 加载或预处理数据时发生错误: {e}")
        sys.exit(1)


def map_department(df, df_map, source_col='渠道来源'):
    """根据映射表为数据添加'部门'列"""
    df_copy = df.copy()
    df_copy['部门'] = 'Other'
    for _, row in reversed(list(df_map.iterrows())):
        keyword, department = row.get('关键词'), row.get('部门')
        if keyword and isinstance(keyword, str):
            mask = df_copy[source_col].str.contains(keyword, case=False, na=False)
            df_copy.loc[mask, '部门'] = department
    return df_copy


def calculate_ltv(data_source_pkr, report_date, days, group_by_col=None, df_map=None):
    """
    计算LTV的核心函数。
    - group_by_col=None: 计算总体LTV (用于产品日报)。
    - group_by_col='部门': 按部门分别计算LTV (用于部门总汇表)。
    """
    print(f"--- 正在计算 LTV-{days}天 ({'按部门' if group_by_col else '产品总体'}) ---")
    df_copy = data_source_pkr.copy()
    
    if group_by_col == '部门' and df_map is not None:
        df_copy = map_department(df_copy, df_map)

    end_date = report_date
    start_date = end_date - timedelta(days=days - 1)
    
    period_data = df_copy[(df_copy['日期'] >= start_date) & (df_copy['日期'] <= end_date)]
    
    if period_data.empty:
        if group_by_col: return pd.DataFrame(columns=[group_by_col, f'LTV-{days}天'])
        return 0

    if group_by_col:
        grouped = period_data.groupby(group_by_col).agg(
            total_profit_pkr=('充减提', 'sum'),
            total_first_deposit=('首存人数', 'sum')
        ).reset_index()
        
        grouped[f'LTV-{days}天'] = (grouped['total_profit_pkr'] / grouped['total_first_deposit'].replace(0, np.nan)) / EXCHANGE_RATE
        return grouped[[group_by_col, f'LTV-{days}天']].fillna(0)
    else: # 计算总体
        total_profit_pkr = period_data['充减提'].sum()
        total_first_deposit = period_data['首存人数'].sum()
        print(f"  - 期间'充减提'总和(PKR): {total_profit_pkr:,.2f}, '首存人数'总和: {total_first_deposit:,.0f}")
        if total_first_deposit == 0: return 0
        return (total_profit_pkr / total_first_deposit) / EXCHANGE_RATE


def get_recharge_rates(df_recharge_rate, report_date):
    """从Book4中提取当天的复充率"""
    rates = { '次日复充率(%)': 0, '3日复充率(%)': 0, '7日复充率(%)': 0, '15日复充率(%)': 0, '30日复充率(%)': 0 }
    today_rates = df_recharge_rate[df_recharge_rate['日期'] == report_date]
    if not today_rates.empty:
        summary_row = today_rates[today_rates['来源渠道'].str.contains('汇总', na=False)]
        rate_data = summary_row.iloc[0] if not summary_row.empty else today_rates.iloc[0]
        for key in rates:
            rates[key] = rate_data.get(key, 0)
    return rates


def calculate_historical_data(all_data, report_date):
    """计算截至报表日期的历史累计数据"""
    # 此处金额单位已经是美元
    df_channel_usd = all_data['channel']
    df_cost = all_data['cost']
    df_dept_map = all_data['dept_map']

    # 按部门的历史充提差
    hist_channel = df_channel_usd[df_channel_usd['日期'] <= report_date].copy()
    hist_channel = map_department(hist_channel, df_dept_map)
    hist_profit_by_dept = hist_channel.groupby('部门')['充减提'].sum().reset_index().rename(columns={'充减提': '历史充提差'})
    
    # 按部门的历史消耗
    hist_cost = df_cost[df_cost['日期'] <= report_date].copy()
    hist_cost_by_dept = hist_cost.groupby('部门')['消耗'].sum().reset_index().rename(columns={'消耗': '历史消耗'})
    
    hist_data = pd.merge(hist_profit_by_dept, hist_cost_by_dept, on='部门', how='outer').fillna(0)
    return hist_data


def generate_product_report(data, df_product_pkr, report_date):
    """生成《产品日报》 - 全字段"""
    print("\n开始生成《产品日报》...")
    df_product_usd, df_cost, df_recharge_rate = data['product_usd'], data['cost'], data['recharge_rate']
    daily_data = df_product_usd[df_product_usd['日期'] == report_date]
    if daily_data.empty: return None

    row = daily_data.iloc[0].copy()
    
    total_cost = df_cost[df_cost['日期'] == report_date]['消耗'].sum()
    new_users, recharge_users, profit, first_deposit_users = row.get('新增用户数',0), row.get('充值人数',0), row.get('充减提',0), row.get('首存人数',0)
    recharge_amount, withdraw_amount, first_deposit_amount = row.get('充值金额',0), row.get('提现金额',0), row.get('首存充值金额',0)
    new_recharge_users, new_recharge_amount = row.get('新增付费人数',0), row.get('新增充值金额',0)
    old_recharge_users, old_recharge_amount, old_profit, old_active_users = row.get('老用户充值人数',0), row.get('老用户充值金额',0), row.get('老用户充减提',0), row.get('老玩家日活',0)
    
    report_dict = {
        '日期': report_date.strftime('%Y-%m-%d'), '产品': '全产品', '消耗': total_cost,
        '注册成本': total_cost/new_users if new_users>0 else 0,
        '首充成本': total_cost/first_deposit_users if first_deposit_users>0 else 0,
        '新增用户数': int(new_users), '充值人数': int(recharge_users), '充值金额': recharge_amount,
        '提现金额': withdraw_amount, '充减提': profit,
        '盈余率(%)': (profit/recharge_amount*100) if recharge_amount>0 else 0,
        '首存人数': int(first_deposit_users), '首存充值金额': first_deposit_amount,
        '首存付费率(%)': (first_deposit_users/new_users*100) if new_users>0 else 0,
        '首存盈余率(%)': ((first_deposit_amount-withdraw_amount)/first_deposit_amount*100) if first_deposit_amount>0 else 0,
        '首存ARPPU': first_deposit_amount/first_deposit_users if first_deposit_users>0 else 0,
        '新增付费人数': int(new_recharge_users), '新增充值金额': new_recharge_amount,
        '新增付费率(%)': (new_recharge_users/new_users*100) if new_users>0 else 0,
        '老用户充值人数': int(old_recharge_users), '老用户充值金额': old_recharge_amount,
        '老用户付费率(%)': (old_recharge_users/old_active_users*100) if old_active_users>0 else 0,
        '老用户ARPPU': old_recharge_amount/old_recharge_users if old_recharge_users>0 else 0,
        '老用户盈余率(%)': (old_profit/old_recharge_amount*100) if old_recharge_amount>0 else 0,
        'ARPPU': recharge_amount/recharge_users if recharge_users>0 else 0,
        '裂变率': (first_deposit_users/recharge_users*100) if recharge_users>0 else 0,
        **get_recharge_rates(df_recharge_rate, report_date),
        'LTV-7天': calculate_ltv(df_product_pkr, report_date, 7),
        'LTV-15天': calculate_ltv(df_product_pkr, report_date, 15),
        'LTV-30天': calculate_ltv(df_product_pkr, report_date, 30)
    }
    
    hist_data = calculate_historical_data(data, report_date)
    report_dict['历史消耗'] = hist_data['历史消耗'].sum()
    report_dict['历史充提差'] = hist_data['历史充提差'].sum()
    report_dict['辅助列'] = ''

    report = pd.DataFrame([report_dict])
    print("✓ 《产品日报》数据生成完成！\n")
    return report


def generate_department_report(data, df_channel_pkr, report_date):
    """生成《部门总汇表》 - 全字段, LTV按部门归因"""
    print("开始生成《部门总汇表》...")
    df_channel_usd, df_cost, df_dept_map = data['channel'], data['cost'], data['dept_map']
    
    daily_data = df_channel_usd[df_channel_usd['日期'] == report_date].copy()
    if daily_data.empty: return None

    daily_data = map_department(daily_data, df_dept_map)
    numeric_cols = daily_data.select_dtypes(include=np.number).columns.tolist()
    report = daily_data.groupby('部门')[numeric_cols].sum().reset_index()
    
    daily_cost_by_dept = df_cost[df_cost['日期'] == report_date][['部门', '消耗']]
    report = pd.merge(report, daily_cost_by_dept, on='部门', how='left').fillna(0)
    
    # --- ⭐️ 核心修正：按部门独立计算LTV ---
    ltv7 = calculate_ltv(df_channel_pkr, report_date, 7, group_by_col='部门', df_map=df_dept_map)
    ltv15 = calculate_ltv(df_channel_pkr, report_date, 15, group_by_col='部门', df_map=df_dept_map)
    ltv30 = calculate_ltv(df_channel_pkr, report_date, 30, group_by_col='部门', df_map=df_dept_map)
    
    report = pd.merge(report, ltv7, on='部门', how='left')
    report = pd.merge(report, ltv15, on='部门', how='left')
    report = pd.merge(report, ltv30, on='部门', how='left')
    
    # --- 计算其他衍生指标 ---
    new_users, first_deposit_users, recharge_amount, recharge_users = report.get('新增用户数',0), report.get('首存人数',0), report.get('充值金额',0), report.get('充值人数',0)
    first_deposit_amount, withdraw_amount, new_recharge_users = report.get('首存充值金额',0), report.get('提现金额',0), report.get('新增付费人数',0)
    old_recharge_users, old_recharge_amount, old_profit, old_active_users = report.get('老用户充值人数',0), report.get('老用户充值金额',0), report.get('老用户充减提',0), report.get('老玩家日活',0)

    report['注册成本'] = report['消耗'] / new_users.replace(0, np.nan)
    report['首充成本'] = report['消耗'] / first_deposit_users.replace(0, np.nan)
    report['盈余'] = report.get('充减提', 0) - report.get('消耗', 0)
    report['盈余率(%)'] = (report['盈余'] / recharge_amount.replace(0, np.nan)) * 100
    report['首存付费率(%)'] = (first_deposit_users / new_users.replace(0, np.nan)) * 100
    report['首存盈余率(%)'] = ((first_deposit_amount - withdraw_amount) / first_deposit_amount.replace(0, np.nan)) * 100
    report['首存ARPPU'] = first_deposit_amount / first_deposit_users.replace(0, np.nan)
    report['新增付费率(%)'] = (new_recharge_users / new_users.replace(0, np.nan)) * 100
    report['老用户付费率(%)'] = (old_recharge_users / old_active_users.replace(0, np.nan)) * 100
    report['老用户ARPPU'] = old_recharge_amount / old_recharge_users.replace(0, np.nan)
    report['老用户盈余率(%)'] = (old_profit / old_recharge_amount.replace(0, np.nan)) * 100
    report['ARPPU'] = recharge_amount / recharge_users.replace(0, np.nan)
    
    recharge_rates = get_recharge_rates(data['recharge_rate'], report_date)
    for key, value in recharge_rates.items(): report[key] = value

    hist_data = calculate_historical_data(data, report_date)
    report = pd.merge(report, hist_data, on='部门', how='left')
    report['日期'] = report_date.strftime('%Y-%m-%d')
    
    # --- 添加总计行 ---
    total_row = report.sum(numeric_only=True).to_frame().T
    total_row['部门'] = '总计'
    # 重新计算总计的比率指标和LTV
    for days in [7, 15, 30]:
        total_ltv = calculate_ltv(df_channel_pkr, report_date, days)
        total_row[f'LTV-{days}天'] = total_ltv
    # ... (此处省略总计行的其他比率指标重算，逻辑同上)
    
    report = pd.concat([report, total_row], ignore_index=True).fillna(0)
    
    print("✓ 《部门总汇表》数据生成完成！\n")
    return report


def generate_channel_report(data, report_date):
    """生成《渠道总汇表》 - 全字段"""
    print("开始生成《渠道总汇表》...")
    df_channel_usd, df_cost, df_dept_map = data['channel'], data['cost'], data['dept_map']
    report = df_channel_usd[df_channel_usd['日期'] == report_date].copy()
    if report.empty: return None

    report = map_department(report, df_dept_map)
    daily_cost_by_dept = df_cost[df_cost['日期'] == report_date][['部门', '消耗']]
    report = pd.merge(report, daily_cost_by_dept, on='部门', how='left').fillna(0)
    
    # (此处省略渠道级别的比率指标计算，逻辑同产品日报)
    print("✓ 《渠道总汇表》数据生成完成！\n")
    return report


def main():
    """主执行函数"""
    print("="*50)
    print(" 数据分析日报自动生成脚本 (LTV归因修正版)")
    print("="*50)
    
    data_frames, df_product_pkr, df_channel_pkr = load_and_prepare_data()
    
    report_date = pd.to_datetime(REPORT_DATE) if REPORT_DATE else data_frames['channel']['日期'].max()
    print(f"报表目标日期: {report_date.strftime('%Y-%m-%d')}\n")
    
    product_report = generate_product_report(data_frames, df_product_pkr, report_date)
    department_report = generate_department_report(data_frames, df_channel_pkr, report_date)
    channel_report = generate_channel_report(data_frames, report_date)
    
    date_str = report_date.strftime('%Y-%m-%d')
    reports_to_save = { f'产品日报_{date_str}.csv': (product_report, PRODUCT_REPORT_DECIMALS), f'部门总汇表_{date_str}.csv': (department_report, OTHER_REPORTS_DECIMALS), f'渠道总汇表_{date_str}.csv': (channel_report, OTHER_REPORTS_DECIMALS)}
    
    print("开始保存CSV文件...")
    for filename, (df, decimals) in reports_to_save.items():
        if df is not None and not df.empty:
            try:
                # 重新排序报表的列，以匹配您的要求
                if "产品日报" in filename:
                    cols_order = ['日期','产品','消耗','注册成本','首充成本','新增用户数','充值人数','充值金额','提现金额','充减提','盈余率(%)','首存人数','首存充值金额','首存付费率(%)','首存盈余率(%)','首存ARPPU','新增付费人数','新增充值金额','新增付费率(%)','老用户充值人数','老用户充值金额','老用户付费率(%)','老用户ARPPU','老用户盈余率(%)','ARPPU','次日复充率(%)','3日复充率(%)','7日复充率(%)','15日复充率(%)','30日复充率(%)','LTV-7天','LTV-15天','LTV-30天','裂变率','历史消耗','历史充提差','辅助列']
                    df = df.reindex(columns=[col for col in cols_order if col in df.columns])
                elif "部门总汇表" in filename:
                    cols_order = ['日期','部门','消耗','注册成本','首充成本','新增用户数','充值人数','充值金额','提现金额','充减提','盈余率(%)','首存人数','首存充值金额','首存付费率(%)','首存盈余率(%)','首存ARPPU','新增付费人数','新增充值金额','新增付费率(%)','老用户充值人数','老用户充值金额','老用户付费率(%)','老用户ARPPU','老用户盈余率(%)','ARPPU','次日复充率(%)','3日复充率(%)','7日复充率(%)','15日复充率(%)','30日复充率(%)','LTV-7天','LTV-15天','LTV-30天','老用户充减提','历史消耗','历史充提差','老玩家日活']
                    df = df.reindex(columns=[col for col in cols_order if col in df.columns])
                
                df.to_csv(filename, index=False, encoding='utf-8-sig', float_format=f'%.{decimals}f')
                print(f"  ✓ 文件已成功保存: {filename}")
            except Exception as e:
                print(f"  ✗ 保存文件失败 {filename}: {e}")
        else:
            print(f"  - 警告: {filename.split('_')[0]} 为空，已跳过保存。")
            
    print("\n" + "="*50)
    print(" 所有任务完成！")
    print("="*50)

if __name__ == '__main__':
    main()
